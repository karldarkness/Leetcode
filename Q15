class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int size = nums.size();
        Qsort(nums, 0, size-1);
        
        vector<vector<int>> threeNums{};
        int i,j,k;
        for(i=0; i<=size-3; i++)
        {
            while(i>0 && i<size && nums[i]==nums[i-1])
                i++;
            j = i+1;
            k = size-1;
            while(j<k)
            {
                if(nums[j]+nums[k] > 0-nums[i])
                    k--;
                else if(nums[j]+nums[k] < 0-nums[i])
                    j++;
                else
                {
                    threeNums.push_back(vector<int>{nums[i],nums[j],nums[k]});
                    j++;
                    while(j<k && nums[j]==nums[j-1])
                        j++;
                }
            }
        }
        return threeNums;
    }
    
    void Qsort(vector<int>&nums, int begin, int end)
    {
        if(begin >= end)
            return;
        int i = begin, j = end;
        int key = nums[begin];
        int temp;
        while(true)
        {
            while(nums[i] <= key)
            {
                i++;
                if(i==end)
                    break;
            }
            while(nums[j] >= key)
            {
                j--;
                if(j==begin)
                    break;
            }
            if(i>=j)
                break;
            temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
        }
        temp = nums[begin];
        nums[begin] = nums[j];
        nums[j] = temp;
        Qsort(nums, begin, j-1);
        Qsort(nums, j+1, end);
    }
};