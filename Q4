class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int size1 = nums1.size();
        int size2 = nums2.size();
        if(size1 > size2)
        {
            swap(nums1, nums2);
            swap(size1, size2);
        }
        int iMin = 0, iMax = size1, halfLen = (size1+size2+1)/2;
        int i, j;
        while(iMin <= iMax)
        {
            i = (iMin+iMax)/2;
            j = halfLen - i;
            if(i>iMin && nums1[i-1]>nums2[j])
                iMax = i-1;
            else if(i<iMax && nums1[i]<nums2[j-1])
                iMin = i+1;
            else
            {
                double left;
                if(i == 0)
                    left = nums2[j-1];
                else if(j == 0)
                    left = nums1[i-1];
                else
                    left = max(nums1[i-1], nums2[j-1]);
                if((size1+size2)%2 == 1)
                    return left;
                
                double right;
                if(i == size1)
                    right = nums2[j];
                else if(j == size2)
                    right = nums1[i];
                else
                    right = min(nums1[i], nums2[j]);
                cout << left << " " << right << endl;
                return (left+right)/2;
            }
        }
        return 0.0;
    }
};